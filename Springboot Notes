---


---

<p>Below is an in-depth exploration of the key Spring Boot  <strong>Controller-layer</strong>  annotations:  <strong>@Controller</strong>,  <strong>@RestController</strong>, and  <strong>@RequestMapping</strong>. This discussion will cover their history, purpose, usage, configuration options, and how they fit into the broader Spring Boot and Spring MVC ecosystem.</p>
<hr>
<h2 id="historical-and-architectural-context">1. Historical and Architectural Context</h2>
<h3 id="spring-mvc-basics">Spring MVC Basics</h3>
<ul>
<li><strong>Spring MVC</strong>  (Model–View–Controller) is a framework within Spring that simplifies the creation of web applications. It abstracts away low-level servlet APIs and provides a more convenient programming model.</li>
<li><strong>Controllers</strong>  in Spring MVC handle incoming HTTP requests, delegate processing to business services, and determine what response (view or data) to return.</li>
</ul>
<h3 id="transition-to-spring-boot">Transition to Spring Boot</h3>
<ul>
<li><strong>Spring Boot</strong>  builds on top of Spring MVC by adding auto-configuration and streamlined setup.</li>
<li>Annotations like  <code>@Controller</code>,  <code>@RestController</code>, and  <code>@RequestMapping</code>  have been in Spring since before Spring Boot. Spring Boot, however, makes them even easier to use by convention and auto-configuration.</li>
</ul>
<hr>
<h2 id="the--controller--annotation">2. The  <code>@Controller</code>  Annotation</h2>
<h3 id="definition-and-purpose">2.1 Definition and Purpose</h3>
<ul>
<li><code>@Controller</code>  is a  <strong>stereotype annotation</strong>  indicating that the class it decorates is a Spring MVC  <strong>controller</strong>.</li>
<li>Semantically, it aligns with the  <strong>“C” in MVC</strong>. You use  <code>@Controller</code>  classes to  <strong>handle web requests</strong>  and typically return  <strong>views</strong>  (like JSP pages, Thymeleaf templates, or other UI rendering engines).</li>
</ul>
<h3 id="stereotype-and-component-scanning">2.2 Stereotype and Component Scanning</h3>
<ul>
<li><code>@Controller</code>  is a specialization of the  <code>@Component</code>  annotation. This means:
<ul>
<li>When you use  <strong>component scanning</strong>  (e.g.,  <code>@ComponentScan</code>), any class annotated with  <code>@Controller</code>  is automatically detected and registered as a Spring bean.</li>
<li>It is recognized specifically as part of the  <strong>MVC</strong>  flow, so Spring MVC can identify it to handle requests.</li>
</ul>
</li>
</ul>
<h3 id="return-values-and-rendering-views">2.3 Return Values and Rendering Views</h3>
<ul>
<li>In a classical MVC application, a method in a  <code>@Controller</code>:
<ul>
<li>
<p>Often  <strong>returns a String</strong>  that corresponds to a view name.</p>
<pre class=" language-java"><code class="prism  language-java"><span class="token annotation punctuation">@Controller</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyController</span> <span class="token punctuation">{</span>
  
    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/hello"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> String <span class="token function">sayHello</span><span class="token punctuation">(</span>Model model<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        model<span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span><span class="token string">"message"</span><span class="token punctuation">,</span> <span class="token string">"Hello, World!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token string">"hello"</span><span class="token punctuation">;</span> <span class="token comment">// e.g., resolves to a Thymeleaf or JSP template named "hello"</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre>
</li>
<li>
<p>Alternatively, it can return a  <code>ModelAndView</code>  object or rely on frameworks like  <strong>Thymeleaf</strong>  or  <strong>Freemarker</strong>  for rendering.</p>
</li>
</ul>
</li>
</ul>
<h3 id="comparison-to-other-stereotype-annotations">2.4 Comparison to Other Stereotype Annotations</h3>
<ul>
<li><strong>@Service</strong>: Marks a class as a service in the business logic layer.</li>
<li><strong>@Repository</strong>: Marks a class as a data-access layer component (e.g., DAO).</li>
<li><strong>@RestController</strong>: A specialized form of  <code>@Controller</code>  for REST APIs (discussed below).</li>
<li>Although these stereotypes are functionally similar in terms of component scanning, they each serve a conceptual purpose in the layered architecture.</li>
</ul>
<hr>
<h2 id="the--restcontroller--annotation">3. The  <code>@RestController</code>  Annotation</h2>
<h3 id="definition-and-purpose-1">3.1 Definition and Purpose</h3>
<ul>
<li>
<p><code>@RestController</code>  is a  <strong>specialization</strong>  of  <code>@Controller</code>  that  <strong>combines</strong>  <code>@Controller</code>  and  <code>@ResponseBody</code>.</p>
</li>
<li>
<p>In a  <strong>RESTful</strong>  web service context, controllers usually return JSON or XML directly rather than rendering HTML views.  <code>@RestController</code>  eliminates the need to annotate every method in the controller with  <code>@ResponseBody</code>.</p>
<pre class=" language-java"><code class="prism  language-java"><span class="token annotation punctuation">@RestController</span>
<span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/api"</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserController</span> <span class="token punctuation">{</span>
    
    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/users"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>User<span class="token operator">&gt;</span> <span class="token function">getUsers</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// returns list of users as JSON in Spring Boot</span>
        <span class="token keyword">return</span> userService<span class="token punctuation">.</span><span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre>
</li>
</ul>
<h3 id="responsebody--implied">3.2  <code>@ResponseBody</code>  Implied</h3>
<ul>
<li>
<p>By default,  <strong>all handler methods</strong>  in a class annotated with  <code>@RestController</code>  <strong>return the body</strong>  of the HTTP response  <strong>(serialized to JSON by default in Spring Boot if Jackson is on the classpath)</strong>.</p>
</li>
<li>
<p>If you had used  <code>@Controller</code>, you would need to explicitly write  <code>@ResponseBody</code>  on every method returning data:</p>
<pre class=" language-java"><code class="prism  language-java"><span class="token annotation punctuation">@Controller</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserController</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@ResponseBody</span>
    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/api/users"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>User<span class="token operator">&gt;</span> <span class="token function">getUsers</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre>
<p>This is unnecessary with  <code>@RestController</code>.</p>
</li>
</ul>
<h3 id="use-cases-and-best-practices">3.3 Use Cases and Best Practices</h3>
<ul>
<li><strong>Use  <code>@RestController</code></strong>  when building  <strong>RESTful</strong>  services that exchange data (JSON, XML, etc.).</li>
<li>It signals both to developers and to Spring that the focus is on returning data in the response body, not views.</li>
</ul>
<hr>
<h2 id="the--requestmapping--annotation">4. The  <code>@RequestMapping</code>  Annotation</h2>
<h3 id="definition-and-purpose-2">4.1 Definition and Purpose</h3>
<ul>
<li><code>@RequestMapping</code>  is used to  <strong>map web requests</strong>  onto specific handler classes and/or handler methods.</li>
<li>Typically, you place a  <code>@RequestMapping</code>  at the  <strong>class level</strong>  to define a base URL, and at the  <strong>method level</strong>  to define a more specific endpoint or path for that method.</li>
</ul>
<h3 id="attributes-of--requestmapping">4.2 Attributes of  <code>@RequestMapping</code></h3>
<p><code>@RequestMapping</code>  can take a variety of parameters that control how requests are mapped. The most commonly used attributes are:</p>
<ol>
<li>
<p><strong><code>value</code>  or  <code>path</code></strong>:</p>
<ul>
<li>Defines the primary mapping URL.</li>
<li>If placed on a class, all methods in that class are relative to it.</li>
<li>If placed on a method, it defines the sub-route for that method.</li>
</ul>
<pre class=" language-java"><code class="prism  language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/api"</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyController</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/hello"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> String <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">"helloView"</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre>
<ul>
<li>Full path to the method above is  <code>/api/hello</code>.</li>
</ul>
</li>
<li>
<p><strong><code>method</code></strong>:</p>
<ul>
<li>Narrows the request to specific  <strong>HTTP methods</strong>  (GET, POST, PUT, DELETE, etc.).</li>
<li>If this is omitted, the mapping applies to all HTTP methods by default.</li>
</ul>
<pre class=" language-java"><code class="prism  language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/hello"</span><span class="token punctuation">,</span> method <span class="token operator">=</span> RequestMethod<span class="token punctuation">.</span>GET<span class="token punctuation">)</span>
<span class="token keyword">public</span> String <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">}</span>

</code></pre>
</li>
<li>
<p><strong><code>params</code></strong>:</p>
<ul>
<li>Further refines the mapping by  <strong>requiring certain request parameters</strong>  (or the absence of them).</li>
</ul>
<pre class=" language-java"><code class="prism  language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/search"</span><span class="token punctuation">,</span> params <span class="token operator">=</span> <span class="token string">"q"</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> String <span class="token function">searchWithQuery</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span> String q<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// only called if ?q=... is present</span>
    <span class="token keyword">return</span> <span class="token string">"searchResults"</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

</code></pre>
</li>
<li>
<p><strong><code>headers</code></strong>:</p>
<ul>
<li>Specifies that the request must have certain  <strong>HTTP headers</strong>  present (or absent).</li>
</ul>
<pre class=" language-java"><code class="prism  language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/json"</span><span class="token punctuation">,</span> headers <span class="token operator">=</span> <span class="token string">"content-type=application/json"</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> ResponseEntity<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">&gt;</span> <span class="token function">handleJsonRequest</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> SomeObject obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// only called if Content-Type is application/json</span>
    <span class="token keyword">return</span> ResponseEntity<span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

</code></pre>
</li>
<li>
<p><strong><code>consumes</code>  and  <code>produces</code></strong>:</p>
<ul>
<li>For controlling  <strong>content negotiation</strong>  in Spring.</li>
<li><code>consumes</code>  indicates the types of media the method can accept.</li>
<li><code>produces</code>  indicates the types of media the method can produce.</li>
</ul>
<pre class=" language-java"><code class="prism  language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>
    value <span class="token operator">=</span> <span class="token string">"/json"</span><span class="token punctuation">,</span>
    method <span class="token operator">=</span> RequestMethod<span class="token punctuation">.</span>POST<span class="token punctuation">,</span>
    consumes <span class="token operator">=</span> MediaType<span class="token punctuation">.</span>APPLICATION_JSON_VALUE<span class="token punctuation">,</span>
    produces <span class="token operator">=</span> MediaType<span class="token punctuation">.</span>APPLICATION_JSON_VALUE
<span class="token punctuation">)</span>
<span class="token keyword">public</span> SomeObject <span class="token function">createObject</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> SomeObject input<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...</span>
    <span class="token keyword">return</span> createdObject<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

</code></pre>
</li>
</ol>
<h3 id="class-level-vs.-method-level-usage">4.3 Class-Level vs. Method-Level Usage</h3>
<ul>
<li><strong>Class-level</strong>  <code>@RequestMapping</code>:
<ul>
<li>Sets a general pattern for all endpoints within the controller.</li>
<li>E.g.,  <code>@RequestMapping("/api/users")</code>  on the class means all endpoints in that controller start with  <code>/api/users</code>.</li>
</ul>
</li>
<li><strong>Method-level</strong>  <code>@RequestMapping</code>:
<ul>
<li>Refines or extends that base pattern.</li>
<li>E.g.,  <code>@RequestMapping("/details")</code>  in a method inside that class will match  <code>/api/users/details</code>.</li>
</ul>
</li>
</ul>
<h3 id="specific-http-method-annotations">4.4 Specific HTTP Method Annotations</h3>
<ul>
<li>
<p>Since Spring 4.3, you can use  <strong>shortcut annotations</strong>  that are more descriptive:</p>
<ul>
<li><code>@GetMapping("/path")</code>  (for  <code>method = RequestMethod.GET</code>)</li>
<li><code>@PostMapping("/path")</code>  (for  <code>method = RequestMethod.POST</code>)</li>
<li><code>@PutMapping("/path")</code>  (for  <code>method = RequestMethod.PUT</code>)</li>
<li><code>@DeleteMapping("/path")</code>  (for  <code>method = RequestMethod.DELETE</code>)</li>
<li><code>@PatchMapping("/path")</code>  (for  <code>method = RequestMethod.PATCH</code>)</li>
</ul>
<p>These are functionally similar to  <code>@RequestMapping(method = ...)</code>  but more specialized and self-documenting.</p>
</li>
</ul>
<h3 id="path-variables-and-query-parameters">4.5 Path Variables and Query Parameters</h3>
<ul>
<li>
<p><strong>Path Variables</strong>:  <code>@PathVariable</code>  works with  <code>@RequestMapping</code>  path placeholders:</p>
<pre class=" language-java"><code class="prism  language-java"><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/users/{userId}"</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> User <span class="token function">getUser</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"userId"</span><span class="token punctuation">)</span> Long id<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">}</span>

</code></pre>
</li>
<li>
<p><strong>Query Parameters</strong>:  <code>@RequestParam</code>  for optional or required query parameters:</p>
<pre class=" language-java"><code class="prism  language-java"><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/users"</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> List<span class="token operator">&lt;</span>User<span class="token operator">&gt;</span> <span class="token function">getUsers</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"page"</span><span class="token punctuation">,</span> defaultValue<span class="token operator">=</span><span class="token string">"0"</span><span class="token punctuation">)</span> <span class="token keyword">int</span> page<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">}</span>

</code></pre>
</li>
</ul>
<hr>
<h2 id="deeper-mechanisms-how-spring-handles-these-annotations">5. Deeper Mechanisms (How Spring Handles These Annotations)</h2>
<h3 id="spring’s-handler-mapping-and-handler-adapter">5.1 Spring’s Handler Mapping and Handler Adapter</h3>
<ul>
<li>Behind the scenes,  <strong>Spring MVC</strong>  uses a set of  <strong>Handler Mappings</strong>  (like  <code>RequestMappingHandlerMapping</code>) to match incoming HTTP requests to the appropriate controller methods.</li>
<li><strong>Handler Adapters</strong>  (like  <code>RequestMappingHandlerAdapter</code>) then invoke the matched method, handle the method parameters, binding, and formatting.</li>
</ul>
<h3 id="method-signature-resolution">5.2 Method Signature Resolution</h3>
<ul>
<li>Spring MVC inspects the  <strong>method signatures</strong>  of  <code>@Controller</code>  /  <code>@RestController</code>  methods and uses  <strong>HandlerMethodArgumentResolver</strong>  to pass in arguments such as  <code>@RequestParam</code>,  <code>@PathVariable</code>,  <code>HttpServletRequest</code>, etc.</li>
<li>For  <code>@RestController</code>  methods, the  <strong>return object</strong>  is passed to  <strong>HttpMessageConverter</strong>  which then serializes it to JSON or XML (depending on the “Accept” header or configuration).</li>
</ul>
<h3 id="view-resolution-in-the-case-of--controller">5.3 View Resolution (in the case of  <code>@Controller</code>)</h3>
<ul>
<li>If a  <code>@Controller</code>  returns a  <strong>String</strong>  without  <code>@ResponseBody</code>, Spring will treat that as a  <strong>logical view name</strong>.</li>
<li>The  <strong>ViewResolver</strong>  chain (e.g.,  <code>InternalResourceViewResolver</code>, ThymeleafViewResolver) will attempt to resolve that name to an actual template (like  <code>hello.html</code>  or  <code>hello.jsp</code>).</li>
</ul>
<hr>
<h2 id="usage-scenarios">6. Usage Scenarios</h2>
<h3 id="traditional-web-app-with-mvc-views">6.1 Traditional Web App with MVC Views</h3>
<ul>
<li>
<p><strong>Use  <code>@Controller</code></strong>  to serve HTML pages or templates.</p>
</li>
<li>
<p>Example:</p>
<pre class=" language-java"><code class="prism  language-java"><span class="token annotation punctuation">@Controller</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HomeController</span> <span class="token punctuation">{</span>
    
    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> String <span class="token function">homePage</span><span class="token punctuation">(</span>Model model<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        model<span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span><span class="token string">"welcomeText"</span><span class="token punctuation">,</span> <span class="token string">"Welcome to the homepage!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token string">"index"</span><span class="token punctuation">;</span> <span class="token comment">// resolves to "index" template</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre>
</li>
</ul>
<h3 id="single-page-application--restful-services">6.2 Single-Page Application / RESTful Services</h3>
<ul>
<li>
<p><strong>Use  <code>@RestController</code></strong>  (or a mix of  <code>@Controller</code>  and  <code>@ResponseBody</code>) to handle JSON or XML data payloads.</p>
</li>
<li>
<p>Example:</p>
<pre class=" language-java"><code class="prism  language-java"><span class="token annotation punctuation">@RestController</span>
<span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/api"</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BookController</span> <span class="token punctuation">{</span>
    
    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/books"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>Book<span class="token operator">&gt;</span> <span class="token function">getAllBooks</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> bookService<span class="token punctuation">.</span><span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre>
</li>
</ul>
<h3 id="mixed-applications">6.3 Mixed Applications</h3>
<ul>
<li>You can mix  <code>@Controller</code>  and  <code>@RestController</code>  in the same application. Often, an app that serves both HTML pages and provides REST APIs is structured into  <strong>different controllers</strong>  (or packages) based on the use case.</li>
</ul>
<hr>
<h2 id="configuration-and-best-practices">7. Configuration and Best Practices</h2>
<ol>
<li>
<p><strong>Consistent URL Design</strong>:</p>
<ul>
<li>Use consistent patterns for your endpoints, e.g.,  <code>/api/books</code>,  <code>/api/books/{id}</code>, etc.</li>
<li>If you have a versioned API, add  <code>/v1</code>,  <code>/v2</code>, etc. at the base path in the class-level  <code>@RequestMapping</code>.</li>
</ul>
</li>
<li>
<p><strong>Use Shortcut Annotations</strong>:</p>
<ul>
<li>Prefer  <code>@GetMapping</code>,  <code>@PostMapping</code>, etc., for clarity over  <code>@RequestMapping(method = RequestMethod.GET, ...)</code>.</li>
</ul>
</li>
<li>
<p><strong>Keep Controllers Thin</strong>:</p>
<ul>
<li>Follow the principle of  <strong>“Thin Controllers, Thick Services”</strong>—focus on request-handling logic in the controller and move business logic to service classes.</li>
</ul>
</li>
<li>
<p><strong>Leverage Spring Boot Auto-Configuration</strong>:</p>
<ul>
<li>By placing your controllers in a package scanned by Spring Boot (same or sub-package of the main  <code>@SpringBootApplication</code>  class), they will be automatically registered.</li>
</ul>
</li>
<li>
<p><strong>HTTP Status Codes</strong>:</p>
<ul>
<li>
<p>In  <code>@RestController</code>, consider returning a  <code>ResponseEntity&lt;YourType&gt;</code>  if you need to set specific  <strong>HTTP status codes</strong>,  <strong>headers</strong>, etc.</p>
</li>
<li>
<p>For example:</p>
<pre class=" language-java"><code class="prism  language-java"><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/items/{id}"</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> ResponseEntity<span class="token operator">&lt;</span>Item<span class="token operator">&gt;</span> <span class="token function">getItem</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span> <span class="token keyword">long</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> itemService<span class="token punctuation">.</span><span class="token function">findById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>item <span class="token operator">-</span><span class="token operator">&gt;</span> ResponseEntity<span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">orElse</span><span class="token punctuation">(</span>ResponseEntity<span class="token punctuation">.</span><span class="token function">notFound</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

</code></pre>
</li>
</ul>
</li>
<li>
<p><strong>Validation</strong>:</p>
<ul>
<li>If you need  <strong>request input validation</strong>, combine  <code>@Valid</code>  or  <code>@Validated</code>  with method parameters (e.g., for request body in a  <code>@RestController</code>, or for form submission in a  <code>@Controller</code>).</li>
</ul>
</li>
</ol>
<hr>
<h2 id="common-pitfalls-or-edge-cases">8. Common Pitfalls or Edge Cases</h2>
<ol>
<li>
<p><strong>Forgetting  <code>@ResponseBody</code>  in  <code>@Controller</code></strong>:</p>
<ul>
<li>If you intend to return JSON data from a regular  <code>@Controller</code>, you must remember  <code>@ResponseBody</code>  on each method or switch to  <code>@RestController</code>.</li>
</ul>
</li>
<li>
<p><strong>Mixing View and Data Returns</strong>:</p>
<ul>
<li>If a  <code>@Controller</code>  method returns an object, Spring will attempt view resolution unless  <code>@ResponseBody</code>  is present. This can lead to confusion and errors.</li>
</ul>
</li>
<li>
<p><strong>Incorrect HTTP Method</strong>:</p>
<ul>
<li>If your method expects  <code>@GetMapping</code>  but the client sends a  <code>POST</code>, Spring MVC by default will reject the request or route it incorrectly.</li>
</ul>
</li>
<li>
<p><strong>Overlapping Mappings</strong>:</p>
<ul>
<li>Two methods with the same  <code>@RequestMapping</code>  or  <code>@GetMapping</code>  path can cause ambiguity errors.</li>
</ul>
</li>
<li>
<p><strong>Path Variable vs. Request Parameter</strong>:</p>
<ul>
<li><code>@PathVariable</code>  is extracted from the URL path segment;  <code>@RequestParam</code>  is from query parameters. Mixing them or expecting the wrong one can lead to 400 (Bad Request) or 404 (Not Found) errors.</li>
</ul>
</li>
<li>
<p><strong>Version Mismatch</strong>:</p>
<ul>
<li>In older versions of Spring,  <code>@RequestMapping</code>  was used for everything, so older tutorials might not show  <code>@GetMapping</code>,  <code>@PostMapping</code>, etc. They are simpler but were introduced in Spring 4.3.</li>
</ul>
</li>
</ol>
<hr>
<h2 id="summary-of-each-annotation">9. Summary of Each Annotation</h2>
<h3 id="controller">9.1  <code>@Controller</code></h3>
<ul>
<li><strong>Scope</strong>: Classical web application (MVC).</li>
<li><strong>Function</strong>: Indicates a Spring MVC controller that handles web requests and typically returns  <strong>views</strong>  (HTML pages, JSP, Thymeleaf, etc.).</li>
<li><strong>Key Point</strong>: Does not automatically serialize the return objects into JSON/XML.</li>
<li><strong>Meta-annotation</strong>: A specialized  <code>@Component</code>.</li>
</ul>
<h3 id="restcontroller">9.2  <code>@RestController</code></h3>
<ul>
<li><strong>Scope</strong>: RESTful web services or microservices.</li>
<li><strong>Function</strong>: A convenience annotation that includes  <code>@Controller</code>  and  <code>@ResponseBody</code>, meaning all returned objects are written directly to the response body.</li>
<li><strong>Key Point</strong>: Eliminates the need to annotate each request-handling method with  <code>@ResponseBody</code>.</li>
<li><strong>Meta-annotation</strong>: Combines  <code>@Controller</code>  and  <code>@ResponseBody</code>.</li>
</ul>
<h3 id="requestmapping">9.3  <code>@RequestMapping</code></h3>
<ul>
<li><strong>Scope</strong>: Maps HTTP requests to handler methods (in classes annotated with  <code>@Controller</code>  or  <code>@RestController</code>).</li>
<li><strong>Function</strong>: Can be placed on the class or method level to specify the path, HTTP method, media types, headers, etc.</li>
<li><strong>Key Point</strong>: Very flexible; can specify complex routing rules, but typically replaced in many use cases by  <code>@GetMapping</code>,  <code>@PostMapping</code>, etc., for readability.</li>
</ul>

